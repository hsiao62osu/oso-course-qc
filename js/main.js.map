{
  "version": 3,
  "sources": ["main.ts"],
  "sourcesContent": ["/*\r\nimport JSZip from 'jszip';\r\nimport axe from 'axe-core';\r\nimport _ from 'lodash';\r\n*/\r\nimport type * as Axe from 'axe-core'\r\n\r\ndeclare const JSZip: typeof import('jszip');\r\ndeclare const axe: typeof import('axe-core');\r\ndeclare const _: typeof import('lodash');\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    /* =======================================================================\r\n        Types\r\n        ======================================================================== */\r\n    type Resource = {\r\n        title: string,\r\n        moduleTitle?: string,\r\n        identifier: string,\r\n        identifierref?: string,\r\n        href?: string\r\n        status: string,\r\n        clarifiedType: string,\r\n        contentType: string,\r\n        analysisHref?: string,\r\n        analysisType?: string\r\n    };\r\n\r\n    type Module = {\r\n        title: string,\r\n        items: Array<ModuleItem>,\r\n        status: string,\r\n    };\r\n\r\n    type ModuleItem = {\r\n        identifier: string,\r\n        title: string,\r\n        identifierRef?: string,\r\n        moduleTitle: string,\r\n        status: string,\r\n        indent: number,\r\n        clarifiedType: string,\r\n        contentType: string,\r\n    }\r\n\r\n    type ManifestResourceWithElement = {\r\n        title: string,\r\n        resource?: Resource;\r\n        resourceElement: Element;\r\n    }\r\n\r\n    type VideoObject = {\r\n        platform: string;\r\n        src: string;\r\n        hasTranscript: boolean;\r\n        itemTitle: string;\r\n    }\r\n\r\n    type FileObject = {\r\n        text: string;\r\n        itemType: string;\r\n        itemModule: string;\r\n        itemTitle: string;\r\n        href: string;\r\n    };\r\n\r\n    const LINK_TYPES = ['osu', 'external', 'course', 'unknown'] as const;\r\n    type LinkType = (typeof LINK_TYPES)[number];\r\n\r\n    type LinkObject = {\r\n        url: string;\r\n        text: string;\r\n        itemTitle: string;\r\n        type: LinkType;\r\n    };\r\n\r\n    type EnhancedAxeResult = Axe.Result & {\r\n        itemTitle: string,\r\n        itemType: string,\r\n        status: string,\r\n        moduleTitle: string,\r\n    };\r\n\r\n    type EnhancedAxeResults = Omit<Axe.AxeResults, 'violations' | 'passes' | 'incomplete' | 'inapplicable'> & {\r\n        violations: Array<EnhancedAxeResult>,\r\n        passes: Array<EnhancedAxeResult>,\r\n        incomplete: Array<EnhancedAxeResult>,\r\n        inapplicable: Array<EnhancedAxeResult>\r\n    };\r\n\r\n    /* =========================================================================\r\n       State & Shared Utilities\r\n       ========================================================================= */\r\n\r\n    const allResources: Array<Resource> = [];\r\n    const allModules: Array<Module> = [];\r\n\r\n    /**\r\n     * Stored summary of accessibility scan results.\r\n     * Structure includes axe results categories: violations, passes, incomplete, inapplicable\r\n     */\r\n    let accessibilityData: EnhancedAxeResults;\r\n\r\n    // Shared DOMParser instance to reuse across parsing operations\r\n    const SHARED_PARSER = new DOMParser();\r\n\r\n    // DOM element references (cached)\r\n    const dropZone = document.getElementById('drop-zone');\r\n    const fileInput = document.getElementById('file-input');\r\n    const fileInfo = document.getElementById('file-info');\r\n    const fileNameEl = document.getElementById('file-name');\r\n    const fileSizeEl = document.getElementById('file-size');\r\n    const uploadSection = document.getElementById('upload-section');\r\n    const loadingSection = document.getElementById('loading-section');\r\n    const loadingStatus = document.getElementById('loading-status');\r\n    const progressBar = document.getElementById('progress-bar');\r\n    const resultsSection = document.getElementById('results-section');\r\n    const tabButtons = resultsSection.querySelectorAll('.tab-btn');\r\n    const tabContents = resultsSection.querySelectorAll('.tab-content');\r\n\r\n    /* =========================================================================\r\n       Small DOM helpers\r\n       ========================================================================= */\r\n\r\n    /**\r\n     * Safely set innerHTML for an element by id.\r\n     */\r\n    function setInnerHTMLById(id: string, html: string) {\r\n        const el = document.getElementById(id);\r\n        if (el) el.innerHTML = html;\r\n    }\r\n\r\n    /**\r\n     * Clear the contents of an element by id.\r\n     */\r\n    function clearById(id: string) {\r\n        const el = document.getElementById(id);\r\n        if (el) el.innerHTML = '';\r\n    }\r\n\r\n    function capitalize(s: string): string {\r\n        return s.charAt(0).toUpperCase() + s.slice(1);\r\n    }\r\n\r\n    /**\r\n         * Create badge components\r\n        */\r\n    function createBadge(text: string, colorString?: string) {\r\n        const newSpan = document.createElement('span');\r\n        newSpan.textContent = text;\r\n        let classNames = 'inline-flex items-center rounded-md px-2 py-1 text-xs font-medium inset-ring ';\r\n        switch (colorString) {\r\n            case 'blue':\r\n                classNames += 'bg-blue-400/10 text-blue-400 inset-ring-blue-400/30';\r\n                break;\r\n            case 'red':\r\n                classNames += 'bg-red-400/10 text-red-400 inset-ring-red-400/20';\r\n                break;\r\n            case 'green':\r\n                classNames += 'bg-green-400/10 text-green-500 inset-ring-green-500/20';\r\n                break;\r\n            case 'yellow':\r\n                classNames += 'bg-yellow-400/10 text-yellow-500 inset-ring-yellow-400/20';\r\n                break;\r\n            case 'indigo':\r\n                classNames += 'bg-indigo-400/10 text-indigo-400 inset-ring-indigo-400/30';\r\n                break;\r\n            case 'purple':\r\n                classNames += 'bg-purple-400/10 text-purple-400 inset-ring-purple-400/30';\r\n                break;\r\n            case 'pink':\r\n                classNames += 'bg-pink-400/10 text-pink-400 inset-ring-pink-400/20';\r\n                break;\r\n            case 'gray':\r\n            default:\r\n                classNames += 'bg-gray-400/10 text-gray-400 inset-ring-gray-400/20';\r\n        };\r\n        newSpan.className = classNames;\r\n        return newSpan.outerHTML;\r\n    }\r\n\r\n    const DEFAULT_BADGES = {\r\n        impact: {\r\n            critical: createBadge('Critical', 'red'),\r\n            serious: createBadge('Serious', 'pink'),\r\n            moderate: createBadge('Moderate', 'yellow'),\r\n            minor: createBadge('Minor', 'blue'),\r\n            info: createBadge('Info'),\r\n        },\r\n        status: {\r\n            published: createBadge('Published', 'green'),\r\n            unpublished: createBadge('Unpublished', 'red'),\r\n        }\r\n    };\r\n\r\n    /* =========================================================================\r\n       Tabs\r\n       ========================================================================= */\r\n\r\n    /**\r\n     * Toggle visible tab content and button styles.\r\n     * Do not change semantics (keeps same class toggles as original).\r\n     * targetId - suffix used in ids (e.g. 'structure' to show #tab-content-structure)\r\n     */\r\n    function switchTab(targetId: string) {\r\n        tabContents.forEach(content => {\r\n            content.classList.toggle('hidden', content.id !== `tab-content-${targetId}`);\r\n        });\r\n\r\n        tabButtons.forEach(button => {\r\n            const isTarget = button.id === `tab-btn-${targetId}`;\r\n            button.classList.toggle('border-indigo-500', isTarget);\r\n            button.classList.toggle('text-indigo-600', isTarget);\r\n            button.classList.toggle('border-transparent', !isTarget);\r\n            button.classList.toggle('text-gray-500', !isTarget);\r\n            button.classList.toggle('hover:text-gray-700', !isTarget);\r\n            button.classList.toggle('hover:border-gray-300', !isTarget);\r\n        });\r\n    }\r\n\r\n    tabButtons.forEach(button => {\r\n        button.addEventListener('click', () => {\r\n            const targetId = button.id.replace('tab-btn-', '');\r\n            switchTab(targetId);\r\n        });\r\n    });\r\n\r\n    /* =========================================================================\r\n       Drag & Drop / File selection\r\n       ========================================================================= */\r\n\r\n    dropZone.addEventListener('click', () => fileInput.click());\r\n\r\n    dropZone.addEventListener('dragover', (e) => {\r\n        e.preventDefault();\r\n        dropZone.classList.add('dragover');\r\n    });\r\n\r\n    dropZone.addEventListener('dragleave', () => {\r\n        dropZone.classList.remove('dragover');\r\n    });\r\n\r\n    dropZone.addEventListener('drop', (e) => {\r\n        e.preventDefault();\r\n        dropZone.classList.remove('dragover');\r\n        const files = e.dataTransfer.files;\r\n        if (files.length) handleFile(files[0]);\r\n    });\r\n\r\n    fileInput.addEventListener('change', (e) => {\r\n        if ('files' in e.target && e.target.files instanceof FileList && e.target.files.length > 0) {\r\n            console.log('I am in file input change');\r\n            handleFile(e.target.files[0]);\r\n        }\r\n    });\r\n\r\n    /* =========================================================================\r\n       Progress & UI helpers\r\n       ========================================================================= */\r\n\r\n    /**\r\n     * Update progress bar width and status message.\r\n     */\r\n    function updateProgress(percentage: number, status: string) {\r\n        progressBar.style.width = `${percentage}%`;\r\n        loadingStatus.textContent = status;\r\n    }\r\n\r\n    /**\r\n     * Reset all result panes to their initial empty states.\r\n     */\r\n    function resetResults() {\r\n        setInnerHTMLById('course-structure', '');\r\n        setInnerHTMLById('course-content-list', '');\r\n        setInnerHTMLById('accessibility-results', '<p class=\"text-gray-500\">No issues found or analysis not run.</p>');\r\n        setInnerHTMLById('accessibility-controls', '');\r\n        setInnerHTMLById('link-inventory-results', '<p class=\"text-gray-500\">No links found or analysis not run.</p>');\r\n        setInnerHTMLById('file-attachment-results', '<p class=\"text-gray-500\">No file attachments found.</p>');\r\n        setInnerHTMLById('video-results', '<p class=\"text-gray-500\">No videos found or analysis not run.</p>');\r\n        setInnerHTMLById('link-summary', '');\r\n        setInnerHTMLById('file-attachment-summary', '');\r\n        setInnerHTMLById('video-summary', '');\r\n    }\r\n\r\n    /* =========================================================================\r\n       Archive extraction\r\n       ========================================================================= */\r\n\r\n    /**\r\n     * Extracts files from the provided ZIP archive and returns a map of name->content.\r\n     */\r\n    async function extractArchive(file: File): Promise<{ [key: string]: string }> {\r\n        try {\r\n            updateProgress(10, 'Unzipping archive...');\r\n            const zip = await JSZip.loadAsync(file);\r\n\r\n            updateProgress(30, 'Reading all course files...');\r\n\r\n            const fileContents: { [key: string]: string } = {};\r\n            const zipFiles = Object.values(zip.files).filter(f => !f.dir && !f.name.startsWith('web_resources/'));\r\n            const totalFiles = zipFiles.length;\r\n            let fileCount = 0;\r\n\r\n            for (const zipEntry of zipFiles) {\r\n                const content = await zipEntry.async('string');\r\n                fileContents[zipEntry.name] = content;\r\n                fileCount++;\r\n                const progress = 30 + (60 * (fileCount / totalFiles));\r\n                updateProgress(progress, `Reading file ${fileCount} of ${totalFiles}`);\r\n            }\r\n\r\n            return fileContents;\r\n        } catch (error) {\r\n            loadingStatus.textContent = `Error: ${error.message}`;\r\n            progressBar.style.backgroundColor = '#ef4444';\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /* =========================================================================\r\n       File handling (entry point)\r\n       ========================================================================= */\r\n\r\n    /**\r\n     * Handle file selected by user (drag/drop or file dialog).\r\n     * Shows progress UI and kicks off analysis pipeline.\r\n     */\r\n    function handleFile(file: File) {\r\n        console.log('I am in handleFile');\r\n        fileNameEl.textContent = file.name;\r\n        fileSizeEl.textContent = `${(file.size / 1024 / 1024).toFixed(2)} MB`;\r\n        fileInfo.classList.remove('hidden');\r\n        uploadSection.classList.add('hidden');\r\n        loadingSection.classList.remove('hidden');\r\n        resultsSection.classList.add('hidden');\r\n        resetResults();\r\n        switchTab('structure');\r\n\r\n        (async () => {\r\n            try {\r\n                const fileContents = await extractArchive(file);\r\n                await processAndAnalyze(fileContents);\r\n                updateProgress(100, 'Analysis complete!');\r\n                loadingSection.classList.add('hidden');\r\n                resultsSection.classList.remove('hidden');\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        })();\r\n    }\r\n\r\n    /* =========================================================================\r\n       Manifest parsing and content assembly\r\n       ========================================================================= */\r\n\r\n    /**\r\n     * Parse the imsmanifest and assemble course structure, content items, and then analyze.\r\n     * Preserves original behavior and logic.\r\n     */\r\n    async function processAndAnalyze(fileContents: { [key: string]: string }) {\r\n        const inModuleResourceIdentifiers: Set<string> = new Set();\r\n\r\n        updateProgress(90, 'Parsing manifest...');\r\n\r\n        // Helper to find a manifest <item> element by an identifier (e.g., a meta item's identifier)\r\n        const findManifestItemElementByIdentifier = (id: string): Element | null => {\r\n            if (!id) return null;\r\n            return Array.from(manifestFileContentParsed.getElementsByTagName('item')).find(i => i.getAttribute('identifier') === id) || null;\r\n        };\r\n\r\n        // Helper to find a manifest <resource> element by an identifier (e.g., its corresponding <item>'s identifierref)\r\n        const findManifestResourceElementByIentifier = (id: string): Element | null => {\r\n            if (!id) return null;\r\n            return Array.from(manifestFileContentParsed.getElementsByTagName('resource')).find(i => i.getAttribute('identifierRef') === id) || null;\r\n        };\r\n\r\n        // Map of resource items gathered from imsmanifest.xml\r\n        const manifestFileContent = fileContents['imsmanifest.xml'];\r\n        if (!manifestFileContent) {\r\n            throw new Error(\"imsmanifest.xml not found in the archive.\");\r\n        }\r\n        const manifestFileContentParsed = SHARED_PARSER.parseFromString(manifestFileContent, \"application/xml\");\r\n\r\n        // Gather all manifest <resource> elements\r\n        for (const manifestResourceElement of manifestFileContentParsed.getElementsByTagName(\"resource\")) {\r\n            const resourceIdentifier = manifestResourceElement.getAttribute(\"identifier\");\r\n            const resourceType = manifestResourceElement.getAttribute(\"type\");\r\n            const resourceHref = manifestResourceElement.getAttribute(\"href\");\r\n            let resourceStatus = 'unknown';\r\n            let resourceTitle = 'untitled';\r\n\r\n            let resourceAnalysisHref = null;\r\n            let resourceAnalysisType = 'html';\r\n            const isAssignment = resourceType.includes('associatedcontent/imscc_xmlv1p1/learning-application-resource') && resourceHref && resourceHref.endsWith('html') && !resourceHref.startsWith('course_settings/');\r\n            const isQuizOrSurvey = resourceType.includes('imsqti_xmlv1p2/imscc_xmlv1p1/assessment');\r\n            const isDiscussion = resourceType.includes('imsdt_xmlv1p1');\r\n            const isPage = resourceType === 'webcontent' && resourceHref && resourceHref.startsWith('wiki_content/');\r\n            const isFile = resourceType === 'webcontent' && resourceHref && resourceHref.startsWith('web_resources/');\r\n            const isLink = resourceType.includes('imswl_xmlv1p1');\r\n\r\n            let resourceClarifiedType = 'tbd';\r\n            let resourceIdentifierRef: string | null = null;\r\n\r\n            if (isLink) {\r\n                resourceClarifiedType = 'link';\r\n            } else if (isFile) {\r\n                resourceClarifiedType = 'file';\r\n            } else if (isPage) {\r\n                resourceClarifiedType = 'page';\r\n                const pageContent = fileContents[resourceHref];\r\n                if (pageContent) {\r\n                    const pageDoc = SHARED_PARSER.parseFromString(pageContent, \"text/html\");\r\n                    resourceTitle = pageDoc.querySelector('title')?.textContent || resourceTitle;\r\n                    resourceStatus = pageDoc.querySelector('meta[name=\"workflow_state\"]')?.getAttribute('content') === 'active' ? 'active' : 'unpublished';\r\n                }\r\n                resourceAnalysisHref = resourceHref;\r\n            } else if (isAssignment) {\r\n                resourceClarifiedType = 'assignment';\r\n                const assignmentSettingsPath = Object.keys(fileContents).find(fileName => fileName.startsWith(`${resourceIdentifier}/`) && fileName.endsWith('assignment_settings.xml'));\r\n                if (assignmentSettingsPath) {\r\n                    const settingsDoc = SHARED_PARSER.parseFromString(fileContents[assignmentSettingsPath], \"application/xml\");\r\n                    resourceStatus = settingsDoc.querySelector('workflow_state')?.textContent === 'active' ? 'active' : 'unpublished';\r\n                    resourceTitle = settingsDoc.querySelector('title')?.textContent || resourceTitle;\r\n                }\r\n                const assignmentHtmlPath = Object.keys(fileContents).find(fileName => fileName.startsWith(`${resourceIdentifier}/`) && fileName.endsWith('.html'));\r\n                if (assignmentHtmlPath) resourceAnalysisHref = assignmentHtmlPath;\r\n            } else if (isQuizOrSurvey) {\r\n                const resourceIdentifierRef = manifestResourceElement.querySelector('dependency')?.getAttribute(\"identifierRef\");\r\n                const matchingManifestResourceElement = findManifestResourceElementByIentifier(resourceIdentifierRef);\r\n\r\n                if (matchingManifestResourceElement && fileContents[matchingManifestResourceElement.getAttribute('href')]) {\r\n                    resourceAnalysisHref = matchingManifestResourceElement.getAttribute('href');\r\n                    resourceAnalysisType = 'xml';\r\n                    const itemMetaDoc = SHARED_PARSER.parseFromString(fileContents[resourceAnalysisHref], \"application/xml\");\r\n                    if (itemMetaDoc) {\r\n                        resourceTitle = itemMetaDoc.querySelector('title')?.textContent || resourceTitle;\r\n                        resourceStatus = itemMetaDoc.querySelector('available')?.textContent === 'true' ? 'active' : 'unpublished';\r\n                    }\r\n                    const quizType = itemMetaDoc.querySelector('quiz_type')?.textContent;\r\n                    if (quizType === 'survey') {\r\n                        resourceClarifiedType = 'survey';\r\n                    } else {\r\n                        resourceClarifiedType = 'quiz';\r\n                    }\r\n                }\r\n            } else if (isDiscussion) {\r\n                resourceClarifiedType = 'discussion';\r\n                const discussionXmlPath = `${resourceIdentifier}.xml`;\r\n                if (fileContents[discussionXmlPath]) {\r\n                    resourceAnalysisHref = discussionXmlPath;\r\n                    resourceAnalysisType = 'discussion_xml';\r\n                    const discussionDoc = SHARED_PARSER.parseFromString(fileContents[discussionXmlPath], \"application/xml\");\r\n                    resourceTitle = discussionDoc.querySelector('title')?.textContent || resourceTitle;\r\n\r\n                    const resourceIdentifierRef = manifestResourceElement.querySelector('dependency')?.getAttribute(\"identifierRef\");\r\n                    const matchingManifestResourceElement = findManifestResourceElementByIentifier(resourceIdentifierRef);\r\n\r\n                    if (matchingManifestResourceElement && fileContents[matchingManifestResourceElement.getAttribute('href')]) {\r\n                        const settingsHref = matchingManifestResourceElement.getAttribute('href');\r\n                        const itemSettingsDoc = SHARED_PARSER.parseFromString(fileContents[settingsHref], \"application/xml\");\r\n                        if (itemSettingsDoc) {\r\n                            resourceStatus = itemSettingsDoc.querySelector('workflow_state')?.textContent === 'active' ? 'active' : 'unpublished';\r\n                        }\r\n                        const discussionType = itemSettingsDoc.querySelector('type')?.textContent;\r\n                        if (discussionType === 'announcement') {\r\n                            resourceClarifiedType = 'announcement';\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            allResources.push({\r\n                identifier: resourceIdentifier,\r\n                title: resourceTitle,\r\n                identifierref: resourceIdentifierRef,\r\n                status: resourceStatus,\r\n                clarifiedType: resourceClarifiedType,\r\n                contentType: resourceType,\r\n                analysisHref: resourceAnalysisHref,\r\n                analysisType: resourceAnalysisType,\r\n            });\r\n        }\r\n\r\n        // Gather modules and module contents\r\n        const metaModuleFileContent = fileContents['course_settings/module_meta.xml'];\r\n        if (!metaModuleFileContent) {\r\n            throw new Error(\"course_settings/module_meta.xml not found in the archive.\");\r\n        }\r\n\r\n        const moduleMetaFileContentParsed = SHARED_PARSER.parseFromString(metaModuleFileContent, \"application/xml\");\r\n        const metaModuleElements = Array.from(moduleMetaFileContentParsed.querySelectorAll(\"module\"));\r\n        metaModuleElements.forEach(metaModuleElement => {\r\n            const moduleItems: Array<ModuleItem> = [];\r\n\r\n            const moduleTitle = metaModuleElement.querySelector('title')?.textContent || 'Untitled Module';\r\n            const moduleStatus = metaModuleElement.querySelector('workflow_state')?.textContent === 'active' ? 'active' : 'unpublished';\r\n\r\n            const metaModuleItemElements = Array.from(metaModuleElement.querySelectorAll('item'));\r\n            metaModuleItemElements.forEach(metaModuleItemElement => {\r\n                const moduleItemIdentifier = metaModuleItemElement.getAttribute('identifier');\r\n                const indent = parseInt(metaModuleItemElement.querySelector('indent')?.textContent || '0', 10);\r\n                const status = metaModuleItemElement.querySelector('workflow_state')?.textContent || 'unknown';\r\n                const contentType = metaModuleItemElement.querySelector('content_type')?.textContent || 'unknown';\r\n                const title = metaModuleItemElement.querySelector('title')?.textContent;\r\n                const moduleItemIdentifierRef = metaModuleItemElement.querySelector('identifierref')?.textContent;\r\n\r\n                let clarifiedType = 'tbd';\r\n\r\n                const matchingResource = allResources.find(r => r.identifier === moduleItemIdentifierRef);\r\n                clarifiedType = matchingResource?.clarifiedType || clarifiedType;\r\n\r\n                const moduleItem: ModuleItem = {\r\n                    identifier: moduleItemIdentifier,\r\n                    title,\r\n                    identifierRef: moduleItemIdentifierRef,\r\n                    moduleTitle: moduleTitle,\r\n                    status,\r\n                    indent,\r\n                    clarifiedType,\r\n                    contentType\r\n                };\r\n\r\n                moduleItems.push(moduleItem);\r\n                // Building our list of in-module items\r\n                inModuleResourceIdentifiers.add(moduleItemIdentifier);\r\n            });\r\n\r\n            const module = {\r\n                title: moduleTitle,\r\n                items: moduleItems,\r\n                status: moduleStatus\r\n            };\r\n\r\n            allModules.push(module);\r\n        });\r\n\r\n        displayModules(allModules);\r\n        displayCourseContent(allResources);\r\n\r\n        updateProgress(95, 'Analyzing course content...');\r\n        // TODO: I'm here! So close! \r\n        // await analyzeContent(fileContents, contentItemsForAnalysis);\r\n\r\n        analyzeContent({ string: \"Test\" }, []);\r\n\r\n        updateProgress(100, 'Analysis complete!');\r\n        loadingSection.classList.add('hidden');\r\n        resultsSection.classList.remove('hidden');\r\n\r\n\r\n        /* =========================================================================\r\n           UI: Course Structure & Content display\r\n           (keeps markup and interaction identical to original)\r\n           ========================================================================= */\r\n\r\n        /**\r\n         * Return icon & label given a clarified type.\r\n         * Kept implementation and SVGs identical to original to avoid behavioral changes.\r\n         */\r\n        // TODO: These likely need to be refactored\r\n        function getItemTypeDetails(type: string): { icon: string, label: string } {\r\n            const iconClass = \"w-5 h-5 mr-3 text-gray-500 flex-shrink-0\";\r\n            let details = {\r\n                icon: `<svg class=\"${iconClass}\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z\"></path></svg>`,\r\n                label: 'File'\r\n            };\r\n\r\n            if (type === 'contextmodulesubheader') {\r\n                details.label = 'Header';\r\n                details.icon = `<svg class=\"${iconClass}\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 6h16M4 10h16M4 14h16M4 18h16\"></path></svg>`;\r\n            } else if (type === 'assignment') {\r\n                details.label = 'Assignment';\r\n                details.icon = `<svg class=\"${iconClass}\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01\"></path></svg>`;\r\n            } else if (type === 'page') {\r\n                details.label = 'Page';\r\n                details.icon = `<svg class=\"${iconClass}\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"></path></svg>`;\r\n            } else if (type === 'externalurl') {\r\n                details.label = 'Link';\r\n                details.icon = `<svg class=\"${iconClass}\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1\"></path></svg>`;\r\n            } else if (type === 'survey') {\r\n                details.label = 'Survey';\r\n                details.icon = `<svg class=\"${iconClass}\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4\"></path></svg>`;\r\n            } else if (type === 'quiz') {\r\n                details.label = 'Quiz';\r\n                details.icon = `<svg class=\"${iconClass}\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path></svg>`;\r\n            } else if (type === 'announcement') {\r\n                details.label = 'Announcement';\r\n                details.icon = `<svg class=\"${iconClass}\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M11 5.882V19.24a1.76 1.76 0 01-3.417.592l-2.147-6.15M18 13a3 3 0 100-6M5.436 13.683A4.001 4.001 0 017 6h1.832c4.1 0 7.625-2.236 9.168-5.518l-2.168 1.558a6.002 6.002 0 00-4.5 3.468V13a3 3 0 00-3-3H5.436z\"></path></svg>`;\r\n            } else if (type === 'discussion') {\r\n                details.label = 'Discussion';\r\n                details.icon = `<svg class=\"${iconClass}\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z\"></path></svg>`;\r\n            }\r\n            return details;\r\n        }\r\n\r\n        /**\r\n         * Render the course structure accordion.\r\n         * Implementation mirrors original behavior.\r\n         */\r\n        function displayModules(modules: Array<Module>) {\r\n            const container = document.getElementById('course-structure');\r\n            container.innerHTML = '';\r\n            if (!modules.length) {\r\n                container.innerHTML = '<p class=\"text-gray-500\">No course structure found in manifest.</p>';\r\n                return;\r\n            }\r\n\r\n            modules.forEach(module => {\r\n                const accordionDiv = document.createElement('div');\r\n                accordionDiv.className = 'border border-gray-200 rounded-lg';\r\n\r\n                const button = document.createElement('button');\r\n                button.className = 'accordion-header w-full flex justify-between items-center p-4 text-left font-semibold text-gray-800 bg-gray-50 hover:bg-gray-100 focus:outline-none';\r\n\r\n                const statusIndicator = module.status === 'active'\r\n                    ? DEFAULT_BADGES.status.published\r\n                    : DEFAULT_BADGES.status.unpublished;\r\n\r\n                button.innerHTML = `\r\n                        <span class=\"truncate pr-4\">${module.title}</span>\r\n                        <div class=\"flex items-center flex-shrink-0\">\r\n                            ${statusIndicator}\r\n                            <svg class=\"w-5 h-5 transform transition-transform ml-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 9l-7 7-7-7\"></path></svg>\r\n                        </div>\r\n                    `;\r\n\r\n                const content = document.createElement('div');\r\n                content.className = 'accordion-content bg-white';\r\n\r\n                const innerContent = document.createElement('div');\r\n                innerContent.className = 'p-4 border-t border-gray-200';\r\n\r\n                const ul = document.createElement('ul');\r\n                ul.className = 'space-y-3';\r\n\r\n                module.items.forEach(item => {\r\n                    const li = document.createElement('li');\r\n                    li.className = 'flex items-center justify-between text-gray-700';\r\n\r\n                    // Use numeric indent from module_meta.xml (safe default 0)\r\n                    const rawIndent = item.indent; // Use the indent from the item directly\r\n                    const indentLevel = Number.isFinite(rawIndent) ? Math.max(0, Math.floor(rawIndent)) : 0;\r\n\r\n                    // Apply visual indentation (padding-left) so layout remains stable.\r\n                    li.style.paddingLeft = `${indentLevel * 1.5}rem`;\r\n\r\n                    // Get the correct type details from allCourseContent\r\n                    const itemClarifiedType = item.clarifiedType || 'unspecified';\r\n                    const typeDetails = getItemTypeDetails(itemClarifiedType);\r\n                    const itemStatusIndicator = item.status === 'active'\r\n                        ? DEFAULT_BADGES.status.published\r\n                        : DEFAULT_BADGES.status.unpublished;\r\n\r\n                    li.innerHTML = `\r\n                            <div class=\"flex items-center flex-grow min-w-0\">\r\n                                ${typeDetails.icon}\r\n                                <span class=\"truncate\" title=\"${item.title}\">${item.title}</span>\r\n                            </div>\r\n                            <div class=\"flex items-center flex-shrink-0 ml-4 space-x-2\">\r\n                                <span class=\"text-xs text-gray-600 bg-gray-100 px-2 py-1 rounded-md\">${typeDetails.label}</span>\r\n                                ${itemStatusIndicator}\r\n                            </div>\r\n                        `;\r\n                    ul.appendChild(li);\r\n                });\r\n\r\n                innerContent.appendChild(ul);\r\n                content.appendChild(innerContent);\r\n                accordionDiv.appendChild(button);\r\n                accordionDiv.appendChild(content);\r\n                container.appendChild(accordionDiv);\r\n            });\r\n\r\n            // Add accordion toggle functionality\r\n            container.querySelectorAll('.accordion-header').forEach(button => {\r\n                button.addEventListener('click', () => {\r\n                    const content = button.nextElementSibling;\r\n                    const icon = button.querySelector('svg');\r\n\r\n                    if (content instanceof HTMLElement && icon) {\r\n                        if (content.style.maxHeight) {\r\n                            content.style.maxHeight = null;\r\n                            icon.classList.remove('rotate-180');\r\n                        } else {\r\n                            content.style.maxHeight = content.scrollHeight + \"px\";\r\n                            icon.classList.add('rotate-180');\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n        }\r\n\r\n        // TODO: Here\r\n        /**\r\n         * Render grouped course content accordion (by type).\r\n         * Mirrors original implementation.     */\r\n        // TODO: More robust type checking f0r contenItem\r\n        function displayCourseContent(contentItems: Array<any>) {\r\n            const container = document.getElementById('course-content-list');\r\n            container.innerHTML = '';\r\n            if (!contentItems.length) {\r\n                container.innerHTML = '<p class=\"text-gray-500\">No content items found.</p>';\r\n                return;\r\n            }\r\n\r\n            const groupedByType = contentItems.reduce((acc, item) => {\r\n                const typeLabel = getItemTypeDetails(item.clarifiedType).label;\r\n                (acc[typeLabel] = acc[typeLabel] || []).push(item);\r\n                return acc;\r\n            }, {});\r\n\r\n            // TODO: What is groupedByType?\r\n            console.log(groupedByType);\r\n\r\n            // TODO: What is items?\r\n            for (const [type, items] of Object.entries(groupedByType)) {\r\n                const accordionDiv = document.createElement('div');\r\n                accordionDiv.className = 'border border-gray-200 rounded-lg';\r\n\r\n                const button = document.createElement('button');\r\n                button.className = 'accordion-header w-full flex justify-between items-center p-4 text-left font-semibold text-gray-800 bg-gray-50 hover:bg-gray-100 focus:outline-none';\r\n                button.innerHTML = `\r\n                        <span>${type} (${(items as Array<any>).length})</span>\r\n                        <svg class=\"w-5 h-5 transform transition-transform\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 9l-7 7-7-7\"></path></svg>\r\n                    `;\r\n\r\n                const content = document.createElement('div');\r\n                content.className = 'accordion-content bg-white';\r\n                const innerContent = document.createElement('div');\r\n                innerContent.className = 'p-4 border-t border-gray-200';\r\n                const ul = document.createElement('ul');\r\n                ul.className = 'space-y-3';\r\n\r\n                // TODO: What is items?\r\n                (items as Array<any>).sort((a, b) => a.title.localeCompare(b.title)).forEach(item => {\r\n                    const li = document.createElement('li');\r\n                    li.className = 'flex items-center justify-between text-gray-700 text-sm';\r\n                    const statusIndicator = item.status === 'active' ? DEFAULT_BADGES.status.published : DEFAULT_BADGES.status.unpublished;\r\n                    const moduleIndicator = item.inModule ? createBadge('In Module', 'blue') : createBadge('Not in Module', 'gray');\r\n\r\n                    li.innerHTML = `\r\n                            <span class=\"truncate\" title=\"${item.title}\">${item.title}</span>\r\n                            <div class=\"flex items-center flex-shrink-0 ml-4 space-x-2\">\r\n                                ${moduleIndicator}\r\n                                ${statusIndicator}\r\n                            </div>\r\n                        `;\r\n                    ul.appendChild(li);\r\n                });\r\n\r\n                innerContent.appendChild(ul);\r\n                content.appendChild(innerContent);\r\n                accordionDiv.appendChild(button);\r\n                accordionDiv.appendChild(content);\r\n                container.appendChild(accordionDiv);\r\n            }\r\n\r\n            container.querySelectorAll('.accordion-header').forEach(button => {\r\n                button.addEventListener('click', () => {\r\n                    const content = button.nextElementSibling;\r\n                    const icon = button.querySelector('svg');\r\n                    // TODO: Just in case\r\n                    if (content instanceof HTMLElement && icon) {\r\n                        if (content.style.maxHeight) {\r\n                            content.style.maxHeight = null;\r\n                            icon.classList.remove('rotate-180');\r\n                        } else {\r\n                            content.style.maxHeight = content.scrollHeight + \"px\";\r\n                            icon.classList.add('rotate-180');\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n        }\r\n\r\n        /* =========================================================================\r\n           Content analysis (links, files, videos, accessibility)\r\n           ========================================================================= */\r\n\r\n        /**\r\n         * Analyze provided items: extract links/files/videos and run accessibility checks.\r\n         * items - items to analyze (with href and analysisType)\r\n         */\r\n        // Todo: More robust type checking for item\r\n        async function analyzeContent(fileContents: { string: string }, items: Array<any>) {\r\n            let allLinks: Array<LinkObject> = [], allFiles: Array<FileObject> = [], allVideos: Array<VideoObject> = [];\r\n\r\n            for (const item of items) {\r\n                const content = fileContents[item.href];\r\n                if (!content) continue;\r\n\r\n                let doc: Document;\r\n                if (item.analysisType === 'xml') {\r\n                    const xmlDoc = SHARED_PARSER.parseFromString(content, \"application/xml\");\r\n                    const description = xmlDoc.querySelector(\"description\");\r\n                    const htmlContent = description ? description.textContent : '';\r\n                    doc = SHARED_PARSER.parseFromString(htmlContent, \"text/html\");\r\n                } else if (item.analysisType === 'discussion_xml') {\r\n                    const xmlDoc = SHARED_PARSER.parseFromString(content, \"application/xml\");\r\n                    const text = xmlDoc.querySelector(\"text\");\r\n                    const htmlContent = text ? text.textContent : '';\r\n                    doc = SHARED_PARSER.parseFromString(htmlContent, \"text/html\");\r\n                } else {\r\n                    doc = SHARED_PARSER.parseFromString(content, \"text/html\");\r\n                }\r\n\r\n                allLinks.push(...findLinks(doc, item));\r\n                allFiles.push(...findFileAttachments(doc, item));\r\n                allVideos.push(...findVideos(doc, item));\r\n            }\r\n\r\n            await runAndDisplayAccessibilityChecks(items, fileContents);\r\n            await checkAndDisplayLinks(allLinks);\r\n            displayFileAttachments(allFiles);\r\n            displayVideos(allVideos);\r\n        }\r\n\r\n        /**\r\n         * Run axe accessibility checks on items and prepare data for the accessibility tab.\r\n         */\r\n        // TODO: More robust type checking\r\n        async function runAndDisplayAccessibilityChecks(items: Array<any>, fileContents: { string: string }) {\r\n            let allResults: EnhancedAxeResults;\r\n\r\n            for (const item of items) {\r\n                const content = fileContents[item.href];\r\n                if (!content) continue;\r\n\r\n                let doc: Document;\r\n                if (item.analysisType === 'xml') {\r\n                    const xmlDoc = SHARED_PARSER.parseFromString(content, \"application/xml\");\r\n                    const description = xmlDoc.querySelector(\"description\");\r\n                    const htmlContent = description ? description.textContent : '';\r\n                    doc = SHARED_PARSER.parseFromString(htmlContent, \"text/html\");\r\n\r\n                } else if (item.analysisType === 'discussion_xml') {\r\n                    const xmlDoc = SHARED_PARSER.parseFromString(content, \"application/xml\");\r\n                    const text = xmlDoc.querySelector(\"text\");\r\n                    const htmlContent = text ? text.textContent : '';\r\n                    doc = SHARED_PARSER.parseFromString(htmlContent, \"text/html\");\r\n                } else {\r\n                    doc = SHARED_PARSER.parseFromString(content, \"text/html\");\r\n                }\r\n\r\n                if (doc.body && doc.body.innerHTML.trim() !== '') {\r\n                    try {\r\n                        if (doc.body.querySelectorAll('*').length > 0) {\r\n                            const axeOptions = {\r\n                                preload: false,\r\n                                runOnly: ['wcag2a', 'wcag2aa', 'wcag21a', 'wcag21aa'],\r\n                            };\r\n                            const results = await axe.run(doc.body.querySelectorAll('*'), axeOptions);\r\n\r\n                            const addMetadata = (issue: Axe.Result) => ({\r\n                                ...issue,\r\n                                itemTitle: item.title,\r\n                                itemType: getItemTypeDetails(item.clarifiedType).label,\r\n                                status: item.status,\r\n                                moduleTitle: item.moduleTitle\r\n                            }) as EnhancedAxeResult;\r\n\r\n                            allResults.violations.push(...results.violations.map(addMetadata));\r\n                            allResults.passes.push(...results.passes.map(addMetadata));\r\n                            allResults.incomplete.push(...results.incomplete.map(addMetadata));\r\n                            allResults.inapplicable.push(...results.inapplicable.map(addMetadata));\r\n                        }\r\n                    } catch (e) {\r\n                        console.warn(`Accessibility scan skipped for ${item.title}: ${e.message}`);\r\n                    }\r\n                }\r\n            }\r\n\r\n            accessibilityData = allResults;\r\n\r\n            setupAccessibilityTab(accessibilityData, items);\r\n        }\r\n\r\n        /* =========================================================================\r\n           Accessibility tab: controls & rendering\r\n           ========================================================================= */\r\n\r\n        /**\r\n         * Build the accessibility controls and wire up filters and sorting.\r\n         */\r\n        // TODO: More robust type checking - these are axe results\r\n        function setupAccessibilityTab(results: EnhancedAxeResults, allScannedItems: Array<any>) {\r\n            const controlsContainer = document.getElementById('accessibility-controls');\r\n            controlsContainer.innerHTML = '';\r\n\r\n            // Create grid for filters\r\n            const filterGrid = document.createElement('div');\r\n            filterGrid.className = 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4';\r\n\r\n            // 1. Result Type Filters\r\n            const resultTypeContainer = document.createElement('div');\r\n            resultTypeContainer.innerHTML = `<label class=\"block text-sm font-medium text-gray-700 mb-2\">Show Results:</label>`;\r\n            const resultTypeFilters = document.createElement('div');\r\n            resultTypeFilters.id = 'result-type-filters';\r\n            resultTypeFilters.className = 'flex flex-wrap gap-4';\r\n\r\n            const categories = [\r\n                { name: 'Violations', data: results.violations, color: 'red' },\r\n                { name: 'Passes', data: results.passes, color: 'green' },\r\n                { name: 'Incomplete', data: results.incomplete, color: 'yellow' }\r\n            ];\r\n\r\n            categories.forEach(cat => {\r\n                const filterId = `filter-check-${cat.name.toLowerCase()}`;\r\n                const filterWrapper = document.createElement('div');\r\n                filterWrapper.className = 'flex items-center';\r\n                const checkbox = document.createElement('input');\r\n                checkbox.type = 'checkbox';\r\n                checkbox.id = filterId;\r\n                checkbox.dataset.category = cat.name.toLowerCase();\r\n                checkbox.className = 'h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500';\r\n                if (cat.name === 'Violations') checkbox.checked = true;\r\n\r\n                const label = document.createElement('label');\r\n                label.htmlFor = filterId;\r\n                label.className = 'ml-2 flex items-center cursor-pointer';\r\n                label.innerHTML = `${cat.name} ${cat.name === 'Incomplete' ? '(Manual Inspection Recommended)' : ''} &nbsp; ${createBadge(cat.data.length.toString(), 'purple')}`;\r\n\r\n                filterWrapper.appendChild(checkbox);\r\n                filterWrapper.appendChild(label);\r\n                resultTypeFilters.appendChild(filterWrapper);\r\n            });\r\n            resultTypeContainer.appendChild(resultTypeFilters);\r\n            filterGrid.appendChild(resultTypeContainer);\r\n\r\n            // 2. Item Type Filters\r\n            const allItemTypes = [...new Set([...results.violations, ...results.passes].map(r => r.itemType))];\r\n            if (allItemTypes.length > 1) {\r\n                const itemTypeContainer = document.createElement('div');\r\n                itemTypeContainer.innerHTML = `<label class=\"block text-sm font-medium text-gray-700 mb-2\">Filter by Item Type:</label>`;\r\n                const itemTypeFilters = document.createElement('div');\r\n                itemTypeFilters.id = 'item-type-filters';\r\n                itemTypeFilters.className = 'flex flex-wrap gap-4';\r\n\r\n                allItemTypes.forEach(type => {\r\n                    const filterId = `filter-item-type-${type.replace(/\\s+/g, '')}`;\r\n                    const filterWrapper = document.createElement('div');\r\n                    filterWrapper.className = 'flex items-center';\r\n                    const checkbox = document.createElement('input');\r\n                    checkbox.type = 'checkbox';\r\n                    checkbox.id = filterId;\r\n                    checkbox.dataset.itemType = type;\r\n                    checkbox.className = 'h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500';\r\n                    checkbox.checked = true;\r\n\r\n                    const label = document.createElement('label');\r\n                    label.htmlFor = filterId;\r\n                    label.className = 'ml-2 flex items-center cursor-pointer text-sm';\r\n                    label.textContent = type;\r\n\r\n                    filterWrapper.appendChild(checkbox);\r\n                    filterWrapper.appendChild(label);\r\n                    itemTypeFilters.appendChild(filterWrapper);\r\n                });\r\n                itemTypeContainer.appendChild(itemTypeFilters);\r\n                filterGrid.appendChild(itemTypeContainer);\r\n            }\r\n\r\n            // 3. Status Filters\r\n            const statusContainer = document.createElement('div');\r\n            statusContainer.innerHTML = `<label class=\"block text-sm font-medium text-gray-700 mb-2\">Filter by Status:</label>`;\r\n            const statusFilters = document.createElement('div');\r\n            statusFilters.id = 'status-filters';\r\n            statusFilters.className = 'flex flex-wrap gap-4';\r\n            statusFilters.innerHTML = `\r\n                    <div class=\"flex items-center\">\r\n                        <input id=\"filter-status-published\" type=\"checkbox\" data-status=\"active\" class=\"h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500\" checked>\r\n                        <label for=\"filter-status-published\" class=\"ml-2 text-sm\">Published</label>\r\n                    </div>\r\n                    <div class=\"flex items-center\">\r\n                        <input id=\"filter-status-unpublished\" type=\"checkbox\" data-status=\"unpublished\" class=\"h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500\" checked>\r\n                        <label for=\"filter-status-unpublished\" class=\"ml-2 text-sm\">Unpublished</label>\r\n                    </div>\r\n                `;\r\n            statusContainer.appendChild(statusFilters);\r\n            filterGrid.appendChild(statusContainer);\r\n\r\n            // 4. Module Filters\r\n            const moduleContainer = document.createElement('div');\r\n            moduleContainer.innerHTML = `<label class=\"block text-sm font-medium text-gray-700 mb-2\">Filter by Location:</label>`;\r\n            const moduleFilters = document.createElement('div');\r\n            moduleFilters.id = 'module-filters';\r\n            moduleFilters.className = 'flex flex-wrap gap-4';\r\n            moduleFilters.innerHTML = `\r\n                    <div class=\"flex items-center\">\r\n                        <input id=\"filter-module-in\" type=\"checkbox\" data-in-module=\"true\" class=\"h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500\" checked>\r\n                        <label for=\"filter-module-in\" class=\"ml-2 text-sm\">In a Module</label>\r\n                    </div>\r\n                    <div class=\"flex items-center\">\r\n                        <input id=\"filter-module-out\" type=\"checkbox\" data-in-module=\"false\" class=\"h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500\" checked>\r\n                        <label for=\"filter-module-out\" class=\"ml-2 text-sm\">Not in a Module</label>\r\n                    </div>\r\n                `;\r\n            moduleContainer.appendChild(moduleFilters);\r\n            filterGrid.appendChild(moduleContainer);\r\n\r\n            controlsContainer.appendChild(filterGrid);\r\n\r\n            // 5. Sort control\r\n            const sortContainer = document.createElement('div');\r\n            sortContainer.innerHTML = `<label for=\"sort-select\" class=\"block text-sm font-medium text-gray-700 mt-4\">Sort by:</label>`;\r\n            const select = document.createElement('select');\r\n            select.id = 'sort-select';\r\n            select.className = 'mt-1 block w-full md:w-1/4 pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md';\r\n            select.innerHTML = `\r\n                    <option value=\"name-asc\">Item Name (A-Z)</option>\r\n                    <option value=\"name-desc\">Item Name (Z-A)</option>\r\n                `;\r\n            sortContainer.appendChild(select);\r\n            controlsContainer.appendChild(sortContainer);\r\n\r\n            // Wire up events and render initial results\r\n            controlsContainer.querySelectorAll('input[type=\"checkbox\"], select').forEach(el => {\r\n                el.addEventListener('change', renderAccessibilityResults);\r\n            });\r\n            renderAccessibilityResults();\r\n\r\n            // Add debug accordion listing scanned items (mirrors original)\r\n            const debugAccordion = createDebugAccordion(allScannedItems);\r\n            document.getElementById('accessibility-results').appendChild(debugAccordion);\r\n        }\r\n\r\n        /**\r\n         * Render accessibility results honoring filters and sort control.\r\n         */\r\n        function renderAccessibilityResults() {\r\n            const resultsContainer = document.getElementById('accessibility-results');\r\n            resultsContainer.innerHTML = '';\r\n\r\n            const selectedResultTypes = Array.from(document.querySelectorAll('#result-type-filters input:checked')).map(cb => (cb as HTMLInputElement).dataset.category);\r\n\r\n            const itemTypeFilters = document.querySelectorAll('#item-type-filters input');\r\n            const selectedItemTypes = Array.from(itemTypeFilters).length > 0\r\n                ? Array.from(itemTypeFilters).filter(cb => (cb as HTMLInputElement).checked).map(cb => (cb as HTMLInputElement).dataset.itemType)\r\n                : null;\r\n\r\n            const selectedStatuses = Array.from(document.querySelectorAll('#status-filters input:checked')).map(cb => (cb as HTMLInputElement).dataset.status);\r\n\r\n            const inModule: boolean | null = (document.getElementById('filter-module-in') as HTMLInputElement)?.checked;\r\n            const notInModule: boolean | null = (document.getElementById('filter-module-in') as HTMLInputElement)?.checked;\r\n\r\n            let filteredResults: Array<EnhancedAxeResult> = [];\r\n            selectedResultTypes.forEach(type => {\r\n                if (accessibilityData[type]) filteredResults.push(...accessibilityData[type]);\r\n            });\r\n\r\n            filteredResults = filteredResults.filter(result => {\r\n                const itemTypeMatch = selectedItemTypes ? selectedItemTypes.includes(result.itemType) : true;\r\n                const statusMatch = selectedStatuses.includes(result.status);\r\n                const inModuleMatch = inModule && result.moduleTitle;\r\n                const notInModuleMatch = notInModule && !result.moduleTitle;\r\n                return itemTypeMatch && statusMatch && (inModuleMatch || notInModuleMatch);\r\n            });\r\n\r\n            const groupedByItem = filteredResults.reduce((acc, issue) => {\r\n                (acc[issue.itemTitle] = acc[issue.itemTitle] || []).push(issue);\r\n                return acc;\r\n            }, {});\r\n\r\n            // TODO: More robust type handling\r\n            console.log(groupedByItem);\r\n\r\n            const sortValue = (document.getElementById('sort-select') as HTMLSelectElement)?.value || 'name-asc';\r\n            const sortedItemTitles = Object.keys(groupedByItem).sort((a, b) => {\r\n                if (sortValue === 'name-asc') return a.localeCompare(b);\r\n                return b.localeCompare(a);\r\n            });\r\n\r\n            if (sortedItemTitles.length === 0) {\r\n                resultsContainer.innerHTML = '<p class=\"text-center text-gray-500 py-4\">No results match the current filters.</p>';\r\n                return;\r\n            }\r\n\r\n            sortedItemTitles.forEach(itemTitle => {\r\n                const issues = groupedByItem[itemTitle];\r\n                const itemAccordion = createItemAccordion(itemTitle, issues);\r\n                resultsContainer.appendChild(itemAccordion);\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Create an accordion block for a single item and its issues.\r\n         */\r\n        function createItemAccordion(itemTitle: string, issues: Array<EnhancedAxeResult>): HTMLElement {\r\n            const firstIssue = issues[0];\r\n            const accordionDiv = document.createElement('div');\r\n            accordionDiv.className = 'border border-gray-200 rounded-lg';\r\n\r\n            const button = document.createElement('button');\r\n            button.className = 'accordion-header w-full flex justify-between items-center p-3 text-left text-sm font-medium text-gray-800 bg-gray-50 hover:bg-gray-100 focus:outline-none';\r\n\r\n            const itemStatusIndicator = firstIssue.status === 'active'\r\n                ? DEFAULT_BADGES.status.published\r\n                : DEFAULT_BADGES.status.unpublished;\r\n\r\n            button.innerHTML = `\r\n                <div class=\"flex-grow min-w-0\">\r\n                    <p class=\"truncate font-semibold\">${itemTitle}</p>\r\n                    <p class=\"text-xs text-gray-500 truncate\">Module: ${firstIssue.moduleTitle || 'N/A'}</p>\r\n                </div>\r\n                <div class=\"flex items-center flex-shrink-0 ml-4 space-x-2\">\r\n                    <span class=\"text-xs text-gray-600 bg-gray-100 px-2 py-1 rounded-md\">${firstIssue.itemType}</span>\r\n                    ${itemStatusIndicator}\r\n                    <svg class=\"w-5 h-5 transform transition-transform\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 9l-7 7-7-7\"></path></svg>\r\n                </div>\r\n            `;\r\n\r\n            const content = document.createElement('div');\r\n            content.className = 'accordion-content bg-white';\r\n            const innerContent = document.createElement('div');\r\n            innerContent.className = 'p-4 border-t border-gray-200 space-y-2';\r\n\r\n            issues.forEach(issue => {\r\n                const issueAccordion = createIssueAccordion(issue);\r\n                innerContent.appendChild(issueAccordion);\r\n            });\r\n\r\n            content.appendChild(innerContent);\r\n            accordionDiv.appendChild(button);\r\n            accordionDiv.appendChild(content);\r\n\r\n            button.addEventListener('click', () => {\r\n                const icon = button.querySelector('svg');\r\n                if (content && icon) {\r\n                    if (content.style.maxHeight) {\r\n                        content.style.maxHeight = null; // Collapse\r\n                        icon.classList.remove('rotate-180');\r\n                    } else {\r\n                        content.style.maxHeight = 'none'; // Expand to fit content\r\n                        icon.classList.add('rotate-180');\r\n                    }\r\n                }\r\n            });\r\n\r\n            return accordionDiv;\r\n        }\r\n\r\n        /**\r\n         * Create an accordion for a single accessibility issue.\r\n         */\r\n        function createIssueAccordion(issue: EnhancedAxeResult): HTMLElement {\r\n            const accordionDiv = document.createElement('div');\r\n            accordionDiv.className = 'border border-gray-200 rounded-lg';\r\n\r\n            const button = document.createElement('button');\r\n            button.className = 'accordion-header w-full flex justify-between items-center p-2 text-left text-xs font-medium text-gray-700 bg-gray-50 hover:bg-gray-100 focus:outline-none';\r\n\r\n            button.innerHTML = `\r\n                    <span class=\"truncate pr-4\">${_.escape(issue.help)}</span>\r\n                    <div class=\"flex items-center flex-shrink-0 ml-4\">\r\n                        ${DEFAULT_BADGES.impact[issue.impact] || ''}\r\n                        <svg class=\"w-4 h-4 transform transition-transform ml-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 9l-7 7-7-7\"></path></svg>\r\n                    </div>\r\n                `;\r\n\r\n            const content = document.createElement('div');\r\n            content.className = 'accordion-content bg-white';\r\n\r\n            const innerContent = document.createElement('div');\r\n            innerContent.className = 'p-3 border-t border-gray-200 text-xs space-y-2';\r\n\r\n            // Safe access for nodes array to avoid undefined errors\r\n            const nodeHtml = (issue.nodes && issue.nodes[0] && issue.nodes[0].html) ? issue.nodes[0].html.replace(/</g, '&lt;').replace(/>/g, '&gt;') : '';\r\n            const nodeTargets = (issue.nodes && issue.nodes[0] && issue.nodes[0].target) ? issue.nodes[0].target.join(', ') : '';\r\n\r\n            innerContent.innerHTML = `\r\n                    <div>\r\n                        <p class=\"font-semibold text-gray-800\">Description:</p>\r\n                        <p class=\"text-gray-600\">${_.escape(issue.description)}</p>\r\n                    </div>\r\n                    <div>\r\n                        <p class=\"font-semibold text-gray-800\">Affected Element:</p>\r\n                        <pre class=\"bg-gray-100 p-2 rounded-md text-xs overflow-x-auto\"><code>${nodeHtml}</code></pre>\r\n                    </div>\r\n                     <div>\r\n                        <p class=\"font-semibold text-gray-800\">CSS Selector:</p>\r\n                        <p class=\"text-gray-600 font-mono\">${nodeTargets}</p>\r\n                    </div>\r\n                    <a href=\"${issue.helpUrl}\" target=\"_blank\" class=\"text-indigo-600 hover:underline font-semibold\">Learn More &rarr;</a>\r\n                `;\r\n\r\n            content.appendChild(innerContent);\r\n            accordionDiv.appendChild(button);\r\n            accordionDiv.appendChild(content);\r\n\r\n            button.addEventListener('click', (e) => {\r\n                e.stopPropagation();\r\n                const icon = button.querySelector('svg');\r\n                if (content && icon) {\r\n                    if (content.style.maxHeight) {\r\n                        content.style.maxHeight = null;\r\n                        icon.classList.remove('rotate-180');\r\n                    } else {\r\n                        content.style.maxHeight = content.scrollHeight + \"px\";\r\n                        icon.classList.add('rotate-180');\r\n                    }\r\n                }\r\n            });\r\n\r\n            return accordionDiv;\r\n        }\r\n\r\n        /**\r\n         * Create debug accordion listing scanned items (keeps original behavior).\r\n         */\r\n        // TODO: More robust type checking - these are for accessibility scan\r\n        function createDebugAccordion(scannedItems: Array<any>): HTMLElement {\r\n            const accordionDiv = document.createElement('div');\r\n            accordionDiv.className = 'border border-gray-200 rounded-lg mt-4';\r\n\r\n            const button = document.createElement('button');\r\n            button.className = 'accordion-header w-full flex justify-between items-center p-3 text-left text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 focus:outline-none';\r\n            button.innerHTML = `\r\n                    <span>Items Scanned for Accessibility (${scannedItems.length})</span>\r\n                    <svg class=\"w-5 h-5 transform transition-transform\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 9l-7 7-7-7\"></path></svg>\r\n                `;\r\n\r\n            const content = document.createElement('div');\r\n            content.className = 'accordion-content bg-white';\r\n            const innerContent = document.createElement('div');\r\n            innerContent.className = 'p-4 border-t border-gray-200 max-h-48 overflow-y-auto';\r\n            const ul = document.createElement('ul');\r\n            ul.className = 'list-disc list-inside text-sm text-gray-600';\r\n            scannedItems.forEach(item => {\r\n                const li = document.createElement('li');\r\n                li.textContent = item.title;\r\n                ul.appendChild(li);\r\n            });\r\n            innerContent.appendChild(ul);\r\n            content.appendChild(innerContent);\r\n            accordionDiv.appendChild(button);\r\n            accordionDiv.appendChild(content);\r\n\r\n            button.addEventListener('click', () => {\r\n                const icon = button.querySelector('svg');\r\n                if (content && icon) {\r\n                    if (content.style.maxHeight) {\r\n                        content.style.maxHeight = null;\r\n                        icon.classList.remove('rotate-180');\r\n                    } else {\r\n                        content.style.maxHeight = content.scrollHeight + \"px\";\r\n                        icon.classList.add('rotate-180');\r\n                    }\r\n                }\r\n            });\r\n\r\n            return accordionDiv;\r\n        }\r\n\r\n        /* =========================================================================\r\n           Link, file attachment, video discovery & display\r\n           ========================================================================= */\r\n\r\n        /**\r\n         * Display results for external link inventory.\r\n         * Note: original code simulated link checks due to CORS; preserved here.\r\n         */\r\n        async function checkAndDisplayLinks(links: Array<LinkObject>) {\r\n            const container = document.getElementById('link-inventory-results');\r\n            // TODO: Add this back\r\n            const summaryContainer = document.getElementById('link-summary');\r\n\r\n            if (links.length > 0) {\r\n                container.innerHTML = '';\r\n            } else {\r\n                return;\r\n            }\r\n\r\n            // Create filter UI\r\n            const filterContainer = document.createElement('div');\r\n            filterContainer.innerHTML = `<label class=\"block text-sm font-medium text-gray-700 mb-2\">Filter by Link Type:</label>`;\r\n            const filterCheckboxes = document.createElement('div');\r\n            filterCheckboxes.id = 'link-type-filters';\r\n            filterCheckboxes.className = 'flex flex-wrap gap-4';\r\n\r\n            LINK_TYPES.forEach(type => {\r\n                const filterId = `filter-link-type-${type.replace(/\\s+/g, '')}`;\r\n                const filterWrapper = document.createElement('div');\r\n                filterWrapper.className = 'flex items-center';\r\n                const checkbox = document.createElement('input');\r\n                checkbox.type = 'checkbox';\r\n                checkbox.id = filterId;\r\n                checkbox.dataset.type = type;\r\n                checkbox.className = 'h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500';\r\n                checkbox.checked = true; // Check all by default\r\n\r\n                const label = document.createElement('label');\r\n                label.htmlFor = filterId;\r\n                label.className = 'ml-2 flex items-center cursor-pointer';\r\n                label.textContent = type == 'osu' ? 'OSU' : `${type.charAt(0).toUpperCase()}${type.substring(1)}`;\r\n                label.innerHTML += `&nbsp; ${createBadge(links.filter(l => l.type == type).length.toString(), 'purple')}`;\r\n                filterWrapper.appendChild(checkbox);\r\n                filterWrapper.appendChild(label);\r\n                filterCheckboxes.appendChild(filterWrapper);\r\n            });\r\n\r\n            filterContainer.appendChild(filterCheckboxes);\r\n            container.appendChild(filterContainer);\r\n\r\n            // Function to display links\r\n            const displayLinks = (filteredLinks: Array<LinkObject>) => {\r\n                let contentDiv = container.querySelector('.space-y-3');\r\n                if (!contentDiv) {\r\n                    contentDiv = document.createElement('div');\r\n                    contentDiv.className = 'space-y-3';\r\n                    container.appendChild(contentDiv);\r\n                }\r\n                contentDiv.innerHTML = ''; // Clear previous links\r\n\r\n                if (filteredLinks.length === 0) {\r\n                    contentDiv.innerHTML = '<p class=\"text-gray-500\">No links found for the selected types.</p>';\r\n                    return;\r\n                }\r\n\r\n                const linkTypeBadges = {\r\n                    osu: createBadge('OSU', 'red'),\r\n                    external: createBadge('External', 'blue'),\r\n                    course: createBadge('Course', 'yellow'),\r\n                };\r\n\r\n                for (const link of filteredLinks) {\r\n                    const linkDiv = document.createElement('div');\r\n                    linkDiv.className = 'p-3 rounded-md bg-gray-50 flex items-start space-x-3';\r\n                    linkDiv.innerHTML = `\r\n                    <div class=\"flex-grow min-w-0\">\r\n                        <p class=\"font-medium text-gray-800 truncate\" title=\"${link.text}\">${link.text}</p>\r\n                        <p aria-description=\"link type\">${linkTypeBadges[link.type]}</p>\r\n                        <p class=\"text-sm text-gray-500\"><strong>Target</strong>: <a href=\"${link.url}\" target=\"_blank\"><u>${link.url}</u></a></p>\r\n                        <p class=\"text-sm text-gray-500\"><strong>Found in</strong>: ${link.itemTitle}</p>\r\n                    </div>\r\n                `;\r\n                    contentDiv.appendChild(linkDiv);\r\n                }\r\n            };\r\n\r\n            // Filter links based on selected types\r\n            const filterLinks = () => {\r\n                const selectedTypes = Array.from(filterCheckboxes.querySelectorAll('input:checked')).map(cb => (cb as HTMLInputElement).dataset.type);\r\n                const filteredLinks = selectedTypes.length === 0 ? [] : links.filter(link => selectedTypes.includes(link.type));\r\n                displayLinks(filteredLinks);\r\n            };\r\n\r\n            filterCheckboxes.querySelectorAll('input').forEach(checkbox => {\r\n                checkbox.addEventListener('change', filterLinks);\r\n            });\r\n\r\n            // Initial display of links\r\n            filterLinks();\r\n        }\r\n\r\n        /**\r\n         * Display file attachments found in content.\r\n         */\r\n        function displayFileAttachments(files: Array<FileObject>) {\r\n            const container = document.getElementById('file-attachment-results');\r\n            const summaryContainer = document.getElementById('file-attachment-summary');\r\n            summaryContainer.innerHTML = `Attachments found: &nbsp; ${createBadge(files.length.toString(), 'purple')}`;\r\n\r\n            if (files.length === 0) {\r\n                container.innerHTML = '<p class=\"text-gray-500\">No file attachments found.</p>';\r\n                return;\r\n            }\r\n            container.innerHTML = '';\r\n\r\n            files.forEach(file => {\r\n                const liDiv = document.createElement('li');\r\n                liDiv.className = 'p-3 rounded-md bg-gray-50 flex items-start space-x-3';\r\n                liDiv.innerHTML = `\r\n                <div class=\"flex-grow min-w-0\">\r\n                    <p class=\"font-medium text-gray-800 truncate\" title=\"${file.text}\">${file.text}</p>\r\n                    ${createBadge(capitalize(file.itemType))}\r\n                    <p class=\"text-sm text-gray-500\"><strong>In Item</strong>: ${file.itemTitle}</p>\r\n                    <p class=\"text-sm text-gray-500\"><strong>In Module</strong>: ${file.itemModule}</p>\r\n                </div>\r\n            `;\r\n                container.appendChild(liDiv);\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Display video findings (platform & transcript presence).\r\n         */\r\n        function displayVideos(videos: Array<VideoObject>) {\r\n            const container = document.getElementById('video-results');\r\n            const summaryContainer = document.getElementById('video-summary');\r\n\r\n            const withTranscript = videos.filter(v => v.hasTranscript).length;\r\n            const withoutTranscript = videos.length - withTranscript;\r\n\r\n            summaryContainer.innerHTML = `\r\n                    ${createBadge(`${withTranscript} transcript detected`, 'green')}\r\n                    ${createBadge(`${withoutTranscript} transcript not detected`, 'yellow')}\r\n                `;\r\n\r\n            if (videos.length === 0) {\r\n                container.innerHTML = '<p class=\"text-gray-500\">No embedded videos found.</p>';\r\n                return;\r\n            }\r\n            container.innerHTML = '';\r\n            const ul = document.createElement('ul');\r\n            ul.className = 'space-y-3';\r\n            videos.forEach(video => {\r\n                const li = document.createElement('li');\r\n                li.className = 'p-3 bg-gray-50 rounded-md flex items-center space-x-3';\r\n                const statusIcon = video.hasTranscript\r\n                    ? `<svg class=\"w-5 h-5 text-green-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"></path></svg>`\r\n                    : `<svg class=\"w-5 h-5 text-yellow-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 9v2m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path></svg>`;\r\n\r\n                li.innerHTML = `\r\n                        <div>${statusIcon}</div>\r\n                        <div>\r\n                            <p class=\"font-medium text-gray-800\">${video.platform} Video</p>\r\n                            <p class=\"text-sm text-gray-500\">Found in: ${video.itemTitle}</p>\r\n                        </div>\r\n                    `;\r\n                ul.appendChild(li);\r\n            });\r\n            container.appendChild(ul);\r\n        }\r\n\r\n        /* =========================================================================\r\n           Content parsing helpers (links/files/videos               \r\n           ========================================================================= */\r\n\r\n        /**\r\n         * Find external links in a document and return structured items.\r\n         */\r\n        // TODO: More robust type checking for item\r\n        function findLinks(doc: Document, item: any): Array<LinkObject> {\r\n\r\n            const links = Array<LinkObject>();\r\n            if (!doc || !doc.querySelectorAll) return links;\r\n            doc.querySelectorAll('a[href]').forEach(a => {\r\n                const href = (a as HTMLAnchorElement).getAttribute('href');\r\n                if (href && !href.startsWith('#') && !href.startsWith('mailto') && !a.classList.contains('instructure_file_link') && !a.classList.contains('instructure_scribd_file')) {\r\n                    let type = 'unknown';\r\n                    if (href.startsWith('$CANVAS') || href.includes('$WIKI_REFERENCE$')) {\r\n                        type = 'course';\r\n                    } else if (href.includes('.osu.edu') || href.includes('.ohio-state.edu')) {\r\n                        type = 'osu';\r\n                    } else {\r\n                        type = 'external'\r\n                    }\r\n                    links.push({ url: href, text: a.textContent.trim(), itemTitle: item.title, type: type as LinkType });\r\n                }\r\n            });\r\n            return links;\r\n        }\r\n\r\n        /**\r\n         * Find file attachment links in a document.\r\n         */\r\n        // TODO: More robust type checking\r\n        function findFileAttachments(doc: Document, item: any): Array<FileObject> {\r\n            const files = [];\r\n\r\n            if (!doc || !doc.querySelectorAll) return files;\r\n            doc.querySelectorAll('a.instructure_file_link, a.instructure_scribd_file').forEach(a => {\r\n                files.push({\r\n                    text: a.textContent.trim(),\r\n                    itemType: item.clarifiedType,\r\n                    itemModule: item.inModule ? item.moduleTitle : '(None)',\r\n                    itemTitle: item.title, href: (a as HTMLAnchorElement).href\r\n                });\r\n            });\r\n\r\n            return files;\r\n        }\r\n\r\n        /**\r\n         * Find embedded iframes that correspond to supported video platforms.\r\n         */\r\n        // TODO: More robust type checking\r\n        function findVideos(doc: Document, item: any): Array<VideoObject> {\r\n            const videos = Array<VideoObject>();\r\n            if (!doc || !doc.querySelectorAll) return videos;\r\n            doc.querySelectorAll('iframe').forEach(iframe => {\r\n                const src = (iframe.src || '').toLowerCase();\r\n                let platform = 'Unknown';\r\n                if (src.includes('youtube.com') || src.includes('youtu.be')) platform = 'YouTube';\r\n                else if (src.includes('vimeo.com')) platform = 'Vimeo';\r\n                else if (src.includes('mediasite.com')) platform = 'Mediasite';\r\n                else if (src.includes('echo360.com')) platform = 'Echo360';\r\n                else if (src.includes('panopto.com')) platform = 'Panopto';\r\n\r\n                if (platform !== 'Unknown') {\r\n                    const adjacentText = (iframe.previousSibling?.textContent || '') + ' ' + (iframe.nextSibling?.textContent || '');\r\n                    const hasTranscript = /transcript|caption/i.test(adjacentText);\r\n                    videos.push({ platform, src: iframe.src, hasTranscript, itemTitle: item.title });\r\n                }\r\n            });\r\n            return videos;\r\n        }\r\n\r\n        /* =========================================================================\r\n           End DOMContentLoaded\r\n           ========================================================================= */\r\n    }\r\n});"],
  "mappings": "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",
  "names": ["resourceIdentifierRef", "fileContents"]
}
